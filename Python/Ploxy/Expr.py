# This file is auto-generated by __defineAst.

from typing import Protocol, TypeVar
from abc import ABC, abstractmethod

R = TypeVar('R')

class Expr(ABC):
    class Visitor(Protocol[R]):
       @abstractmethod
       def visitAssignExpr(self, expr: 'Expr.Assign'):
          pass
       @abstractmethod
       def visitBinaryExpr(self, expr: 'Expr.Binary'):
          pass
       @abstractmethod
       def visitCallExpr(self, expr: 'Expr.Call'):
          pass
       @abstractmethod
       def visitGetExpr(self, expr: 'Expr.Get'):
          pass
       @abstractmethod
       def visitGroupingExpr(self, expr: 'Expr.Grouping'):
          pass
       @abstractmethod
       def visitLiteralExpr(self, expr: 'Expr.Literal'):
          pass
       @abstractmethod
       def visitLogicalExpr(self, expr: 'Expr.Logical'):
          pass
       @abstractmethod
       def visitSetExpr(self, expr: 'Expr.Set'):
          pass
       @abstractmethod
       def visitSuperExpr(self, expr: 'Expr.Super'):
          pass
       @abstractmethod
       def visitThisExpr(self, expr: 'Expr.This'):
          pass
       @abstractmethod
       def visitUnaryExpr(self, expr: 'Expr.Unary'):
          pass
       @abstractmethod
       def visitVariableExpr(self, expr: 'Expr.Variable'):
          pass

    @abstractmethod
    def accept(self, visitor: 'Expr.Visitor[R]') -> R:
        raise NotImplementedError()

class Assign(Expr):
    def __init__(self, name, value) -> None:
          self.name = name
          self.value = value

    def accept(self, visitor) -> R:
        return visitor.visitAssignExpr(self)

class Binary(Expr):
    def __init__(self, left, operator, right) -> None:
          self.left = left
          self.operator = operator
          self.right = right

    def accept(self, visitor) -> R:
        return visitor.visitBinaryExpr(self)

class Call(Expr):
    def __init__(self, callee, paren, arguments) -> None:
          self.callee = callee
          self.paren = paren
          self.arguments = arguments

    def accept(self, visitor) -> R:
        return visitor.visitCallExpr(self)

class Get(Expr):
    def __init__(self, object, name) -> None:
          self.object = object
          self.name = name

    def accept(self, visitor) -> R:
        return visitor.visitGetExpr(self)

class Grouping(Expr):
    def __init__(self, expression) -> None:
          self.expression = expression

    def accept(self, visitor) -> R:
        return visitor.visitGroupingExpr(self)

class Literal(Expr):
    def __init__(self, value) -> None:
          self.value = value

    def accept(self, visitor) -> R:
        return visitor.visitLiteralExpr(self)

class Logical(Expr):
    def __init__(self, left, operator, right) -> None:
          self.left = left
          self.operator = operator
          self.right = right

    def accept(self, visitor) -> R:
        return visitor.visitLogicalExpr(self)

class Set(Expr):
    def __init__(self, object, name, value) -> None:
          self.object = object
          self.name = name
          self.value = value

    def accept(self, visitor) -> R:
        return visitor.visitSetExpr(self)

class Super(Expr):
    def __init__(self, keyword, method) -> None:
          self.keyword = keyword
          self.method = method

    def accept(self, visitor) -> R:
        return visitor.visitSuperExpr(self)

class This(Expr):
    def __init__(self, keyword) -> None:
          self.keyword = keyword

    def accept(self, visitor) -> R:
        return visitor.visitThisExpr(self)

class Unary(Expr):
    def __init__(self, operator, right) -> None:
          self.operator = operator
          self.right = right

    def accept(self, visitor) -> R:
        return visitor.visitUnaryExpr(self)

class Variable(Expr):
    def __init__(self, name) -> None:
          self.name = name

    def accept(self, visitor) -> R:
        return visitor.visitVariableExpr(self)

