# This file is auto-generated by __defineAst.

from typing import Protocol, TypeVar
from abc import ABC, abstractmethod
from Expr import Expr

R = TypeVar('R')

class Stmt(ABC):
    class Visitor(Protocol[R]):
       @abstractmethod
       def visitBlockStmt(self, stmt: 'Expr.Block'):
          pass
       @abstractmethod
       def visitPrintStmt(self, stmt: 'Expr.Print'):
          pass
       @abstractmethod
       def visitVarStmt(self, stmt: 'Expr.Var'):
          pass

    @abstractmethod
    def accept(self, visitor: 'Expr.Visitor[R]') -> R:
        raise NotImplementedError()

class Block(Stmt):
    def __init__(self, statments) -> None:
          self.statments = statments

    def accept(self, visitor) -> R:
        return visitor.visitBlockStmt(self)

class Print(Stmt):
    def __init__(self, expression) -> None:
          self.expression = expression

    def accept(self, visitor) -> R:
        return visitor.visitPrintStmt(self)

class Var(Stmt):
    def __init__(self, name, initializer) -> None:
          self.name = name
          self.initializer = initializer

    def accept(self, visitor) -> R:
        return visitor.visitVarStmt(self)

